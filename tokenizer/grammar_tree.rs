use std::collections::HashMap;
use super::include::{Node, TokenType, Flag, AFFECT_OPERATOR};
use super::tokenizer::push_token;

pub fn build_grammar_tree() -> HashMap<TokenType, Node> {
    let mut group_map = HashMap::new();
    group_map.insert(
        TokenType::Request,
        Node::new(
            TokenType::Request,
            vec!(
                Node::leaf(TokenType::CreateReq),
                Node::leaf(TokenType::ResetReq),
                Node::leaf(TokenType::InsertReq),
                Node::leaf(TokenType::SelectReq),
                Node::leaf(TokenType::UpdateReq),
                Node::leaf(TokenType::DeleteReq),
                Node::leaf(TokenType::DropReq)
            ),
            vec!()
        )
    );

    group_map.insert(
        TokenType::ResetReq,
        Node::new(
            TokenType::ResetReq,
            vec!(),
            vec!(
                Node::comma_leaf_c(TokenType::Keyword, vec!("RESET")).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::CreateReq,
        Node::new(
            TokenType::CreateReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Keyword,
                            vec!(),
                            vec!(
                                Node::new(
                                    TokenType::Ident,
                                    vec!(
                                         Node::comma_leaf(TokenType::DeclarationTuple)
                                    ),
                                    vec!(),
                                ).react(push_token)
                            ),
                            vec!("TABLE")
                        )
                    ),
                    vec!("CREATE")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::DeclarationTuple,
        Node::new(
            TokenType::DeclarationTuple,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Symbol,
                    vec!(
                        Node::new(
                            TokenType::SerieDeclaration,
                            vec!(),
                            vec!(
                                Node::leaf_c(TokenType::Symbol, vec!(")"))
                            )
                        )
                    ),
                    vec!(
                        Node::leaf_c(TokenType::Symbol, vec!(")"))
                    ),
                    vec!("(")
                )
            )
        )
    );

    group_map.insert(
        TokenType::SerieDeclaration,
        Node::new(
            TokenType::SerieDeclaration,
            vec!(
                Node::new_end(
                    TokenType::Declaration,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::SerieDeclaration)
                            ),
                            vec!(),
                            vec!(",")
                        )
                    )
                )
            ),
            vec!()
        )
    );

    group_map.insert(
        TokenType::Declaration,
        Node::new(
            TokenType::Declaration,
            vec!(),
            vec!(
                Node::new(
                    TokenType::Ident,
                    vec!(),
                    vec!(
                        Node::new_end(
                            TokenType::Type,
                            vec!(
                                Node::leaf(TokenType::PrimaryKey),
                                Node::leaf(TokenType::DefaultValue)
                            ),
                            vec!()
                        ).react(push_token)
                    )
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::PrimaryKey,
        Node::new(
            TokenType::PrimaryKey,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(),
                    vec!(
                        Node::leaf_c(TokenType::Keyword, vec!("KEY"))
                    ),
                    vec!("PRIMARY")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::DefaultValue,
        Node::new(
            TokenType::DefaultValue,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(
                        Node::leaf(TokenType::Expression)
                    ),
                    vec!(),
                    vec!("DEFAULT")
                )
            )
        )
    );

     group_map.insert(
        TokenType::Expression,
        Node::new(
            TokenType::Expression,
            vec!(
                Node::new_end(
                    TokenType::Value,
                    vec!(),
                    vec!(
                        Node::new(
                            TokenType::Operator,  // Operateur
                            vec!(
                                Node::leaf(TokenType::Expression)
                            ),
                            vec!()
                        ).react(push_token)
                    )
                )
            ),
            vec!(
                Node::new_c(
                    TokenType::Symbol,  //(
                    vec!(
                        Node::new(
                            TokenType::Expression,
                            vec!(),
                            vec!(
                                Node::new_end_c(
                                    TokenType::Symbol, // )
                                    vec!(),
                                    vec!(
                                        Node::new(
                                            TokenType::Operator,
                                            vec!(
                                                Node::leaf(TokenType::Expression)
                                            ),
                                            vec!()
                                        ).react(push_token)
                                    ), 
                                    vec!(")") 
                                ).react(push_token)
                            )
                        )
                    ),
                    vec!(),
                    vec!("(")
                ).react(push_token)
            )
        )
    );

    
    group_map.insert(
        TokenType::Value,
        Node::new(
            TokenType::Value,
            vec!(
                Node::leaf(TokenType::String)
            ),
            vec!(
                Node::leaf(TokenType::Ident).react(push_token),
                Node::leaf(TokenType::Number).react(push_token),
                Node::new_c(
                    TokenType::Symbol,
                    vec!(
                        Node::leaf(TokenType::Value)
                    ),
                    vec!(),
                    vec!("-")
                )
            )
        )
    );

    group_map.insert(
        TokenType::InsertReq,
        Node::new(
            TokenType::InsertReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Keyword,
                            vec!(),
                            vec!(
                                Node::new(
                                    TokenType::Ident,
                                    vec!(
                                        Node::new(
                                            TokenType::IdentTupple,
                                            vec!(),
                                            vec!(
                                                Node::new_c(
                                                    TokenType::Keyword,
                                                    vec!(
                                                        Node::comma_leaf(TokenType::ExpressionTupple)
                                                    ),
                                                    vec!(),
                                                    vec!("VALUES")
                                                )
                                            )
                                        )
                                    ),
                                    vec!()
                                ).react(push_token)
                            ),
                            vec!("INTO")
                        )
                    ),
                    vec!("INSERT")
                ).react(push_token)
            )
        )
    );


    group_map.insert(
        TokenType::IdentTupple,
        Node::new(
            TokenType::IdentTupple,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Symbol,
                    vec!(
                        Node::new(
                            TokenType::SerieIdent,
                            vec!(),
                            vec!(
                                Node::leaf_c(TokenType::Symbol, vec!(")"))
                            )
                        )
                    ),
                    vec!(
                        Node::leaf_c(TokenType::Symbol, vec!(")"))
                    ),
                    vec!("(")
                )
            )
        )
    );

    group_map.insert(
        TokenType::SerieIdent,
        Node::new(
            TokenType::SerieIdent,
            vec!(),
            vec!(
                Node::new_end(
                    TokenType::Ident,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::SerieIdent)
                            ),
                            vec!(),
                            vec!(",")
                        )
                    )
                ).react(push_token)
            )
        )
    );

    
    group_map.insert(
        TokenType::SerieExpression,
        Node::new(
            TokenType::SerieExpression,
            vec!(
                Node::new_end(
                    TokenType::Expression,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::SerieExpression)
                            ),
                            vec!(),
                            vec!(",")
                        ).react(push_token).set_flag(Flag::Comma)
                    )
                ),
                Node::new_end(
                    TokenType::String,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::SerieExpression)
                            ),
                            vec!(),
                            vec!(",")
                        )
                    )
                )
            ),
            vec!()
        )
    );

    
    group_map.insert(
        TokenType::ExpressionTupple,
        Node::new(
            TokenType::ExpressionTupple,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Symbol, // ( 
                    vec!(
                        Node::new(
                            TokenType::SerieExpression,
                            vec!(),
                            vec!(
                                Node::leaf_c(TokenType::Symbol, vec!(")"))
                            ),
                        )
                    ), 
                    vec!(
                        Node::leaf_c(TokenType::Symbol, vec!(")")) // )
                    ),
                    vec!("(")
                )
            )
        )
    );


    group_map.insert(
        TokenType::String,
        Node::new(
            TokenType::String,
            vec!(),
            vec!(
                Node::new_c_r(
                    TokenType::Symbol,
                    vec!(
                        Node::leaf(TokenType::SerieChar)
                    ),
                    vec!(),
                    vec!("\'"),
                    0
                ).consider_garbage()
            )
        )
    );

    
    group_map.insert(
        TokenType::SerieChar,
        Node::new(
            TokenType::SerieChar,
            vec!(
                Node::new(
                    TokenType::ComplexChar,
                    vec!(),
                    vec!(
                        Node::leaf_c(TokenType::Symbol, vec!("\'"))
                    )
                ).consider_garbage()
            ),
            vec!()
        )
    );


    group_map.insert(
        TokenType::ComplexChar,
        Node::new(
            TokenType::ComplexChar,
            vec!(),
            vec!(
                Node::leaf_c(TokenType::Symbol, vec!("\\", "\"", "\'")).priv_const().react(push_token), // N'importe quoi sauf la contrainte
                Node::new_c(
                    TokenType::Symbol,
                    vec!(),
                    vec!(
                        Node::leaf(TokenType::Symbol).react(push_token)
                    ),
                    vec!("\\")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::SelectReq,
        Node::new(
            TokenType::SelectReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(
                        Node::new(
                            TokenType::SerieIdent,
                            vec!(
                                Node::leaf(TokenType::FromWhereReq)
                            ),
                            vec!()
                        )
                    ),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::FromWhereReq)
                            ),
                            vec!(),
                            vec!("*")
                        ).react(push_token)
                    ),
                    vec!("SELECT")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::FromWhereReq,
        Node::new(
            TokenType::FromWhereReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(),
                    vec!(
                        Node::new_end(
                            TokenType::Ident,
                            vec!(),
                            vec!(
                                Node::new_c(
                                    TokenType::Keyword,
                                    vec!(
                                        Node::comma_leaf(TokenType::Expression)
                                    ),
                                    vec!(),
                                    vec!("WHERE")
                                ).react(push_token)
                            )
                        ).react(push_token)
                    ),
                    vec!("FROM")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::UpdateReq,
        Node::new(
            TokenType::UpdateReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(
                        Node::new(
                            TokenType::SerieAffectation,
                            vec!(
                                Node::leaf(TokenType::FromWhereReq)
                            ),
                            vec!()
                        )
                    ),
                    vec!(),
                    vec!("SET")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::SerieAffectation,
        Node::new(
            TokenType::SerieAffectation,
            vec!(
                Node::new_end(
                    TokenType::Affectation,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Symbol,
                            vec!(
                                Node::leaf(TokenType::SerieAffectation)
                            ),
                            vec!(),
                            vec!(",")
                        ).react(push_token).set_flag(Flag::Comma)
                    )
                )
            ),
            vec!()
        ),            
    );
    
    group_map.insert(
        TokenType::Affectation,
        Node::new(
            TokenType::Affectation,
            vec!(),
            vec!(
                Node::new(
                    TokenType::Ident,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Operator,
                            vec!(
                                Node::leaf(TokenType::Expression),
                                Node::leaf(TokenType::String),
                            ),
                            vec!(),
                            Vec::from(AFFECT_OPERATOR)
                        ).react(push_token)
                    )
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::DeleteReq,
        Node::new(
            TokenType::DeleteReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(
                        Node::leaf(TokenType::FromWhereReq)
                    ),
                    vec!(),
                    vec!("DELETE")
                ).react(push_token)
            )
        )
    );

    group_map.insert(
        TokenType::DropReq,
        Node::new(
            TokenType::DropReq,
            vec!(),
            vec!(
                Node::new_c(
                    TokenType::Keyword,
                    vec!(),
                    vec!(
                        Node::new_c(
                            TokenType::Keyword,
                            vec!(
                                Node::comma_leaf(TokenType::SerieIdent)
                            ),
                            vec!(),
                            vec!("TABLE")
                        )
                    ),
                    vec!("DROP")
                ).react(push_token)
            ),
        )
    );
    
    group_map
}


